LNS profile

	Author: Richard Smolak<cyphre@whywire.com>
	Date: 4-Jul-2005
	Version: 0.0.10

===Purpose

The Lightweight network services profile (LNS profile) has been written for BEER framework as a high-level layer for handling multiple asynchronous remote procedure calls between BEER listener and BEER initiator and vice versa. The design has been inspired by rough draft about LNS protocol developed by Rebol Technologies.

===BEER paths

Since the the LNS profile is using BEER framework we need to set-up all used paths before creation of Listener or Initiator. To make it easier this document is using simple Rebol script (paths.r) for path definitions which is called at the beggining of Listener and Initiator scripts. Here is the content of paths.r file:

	Rebol [
		title: "default paths definitions"
	]
	
	root-path: system/script/path
	libs-path: root-path/libs
	beer-path: root-path/BEER

\note paths.r location

The paths.r file MUST be placed in the root of the whole directory structure (ie. one level up of the BEER folder). So your dir structure should look like this:

	BEER/
	libs/
	example-project/
	paths.r
	
Where the example-project/ folder will contain all our example code mentioned below in this document.

/note

===Setting up the Listener

---Listener initialization

First step is to load all neccesary scripts which will be used by Listener:

	;path file definitions
	do %../paths.r

	;supporting libs files	
	do libs-path/aa.r
	do libs-path/catch.r
	do libs-path/atcp-protocol.r
	
	; user database
	users: load %users.r
	groups: load %groups.r

	; BEER files	
	do beer-path/channel.r
	do beer-path/frameparser.r
	do beer-path/frameread.r
	do beer-path/framesend.r
	do beer-path/session-handler.r
	do beer-path/authenticate.r
	do beer-path/profiles.r
	do beer-path/listener.r
		
	; encoding string	
	do %encoding-salt.r
	
    ;LNS and threads profile module
    do beer-path/profiles/threads.r
    do beer-path/profiles/rpc-profile.r

---Making a service

To create a service use MAKE-SERVICE function:


example of simple service definition:

	basic-service: make-service [
		info: [
			name: "basic services"
		]
		services: [time info]
		data: [
			info [
				service-names: func [] [
					services
				]
				service-obj: func [] [
					self
				]
			]
			time [
				get-time: func [][
					now/time
				]
			]
		]
	]

---Publishing a service

Once you have created a service definition you need to publish it on the Listener side for example:

	publish-service basic-service

---Remote service publishing

If you need to publish a service on Listener remotely from Initiator you can do it using:

	publish-service/remote my-service lns-channel func [channel result][print "REMOTE PUBLISHING DONE"]

This way the my-service deffinition bacame available for the current session.

NOTE: Ater closing the session the service removed and unavailable.

---Listener start

Last neccesary step is run the Listener on a TCP port. Here is example which starts listener on TCP port 8000:

	open-listener 8000
	do-events

If you are running Listener with GUI enabled the code sequence should look like this:

	open-listener 8000
	view/new layout [
		;your GUI code is here
		...
		...
	]
	do-events

===Setting-up the Initiator

---Initiator initialization

First step is to load all neccesary scripts which will be used by Initiator:

	;path file definitions
	do %../paths.r

	;supporting libs files	
	do libs-path/aa.r
	do libs-path/catch.r
	do libs-path/atcp-protocol.r
	
	; user database
	users: load %users.r
	groups: load %groups.r

	; BEER files	
	do beer-path/channel.r
	do beer-path/frameparser.r
	do beer-path/frameread.r
	do beer-path/framesend.r
	do beer-path/session-handler.r
	do beer-path/authenticate.r
	do beer-path/profiles.r
	do beer-path/initiator.r
		
	; encoding string	
	do %encoding-salt.r
	
	;LNS profile module
	do beer-path/profiles/rpc-profile.r

---Establishing of a LNS session(open-session)

In case of the Initiator role you need to establish a session with any runnign Listener(with enabled LNS profile). For that you need to know an IP addres and port on which the Listener is running.

To open a session use function OPEN-SESSION with following syntax:

 OPEN-SESSION url [url!] callback [function!]
 
Here is an example of establishing a session:

	open-session atcp://127.0.0.1:8000 func [port] [
		either port? port [
			;define a global reference to the connection
			peer: port
			print ["Connected to listener:" peer/sub-port/remote-ip now]
			;aproach login sequence call
			do-login
		][
			;an error occured, print the error message
			print port
		]
	]
	
	do-login: does [
		;use your own username and password here
		login aa/get peer/user-data/channels 0 "root" "root-pass" func [result] [
			either result [
				print "logged in as Root"
				;continue with opening a GET filetransfer channel
				open-lns
			][
				print "login unsuccessful"
			]
		]
	]

---Opening LNS channel

After succesful login to the Listener you can finally open one or more LNS channels.

An example of opening one LNS channel:

	open-lns: does [
		open-channel peer 'rpc 1.0.0 func [channel] [
			either channel [
				lns-channel: channel
				print "Channel LNS open"
				do-main
			] [print "didn't succeed to open unsecure echo channel"]
		]
	]


	do-main: does [
		;here is rest of your code applicaton
	]

	;main event loop
	do-events

\note Async behaviour

As you could noticed from the code above the flow of commands have to be written using callbacks due to asynchronous behaviour of the BEER framework.

/note

===LNS calls

---SEND-SERVICE

To execute one or more remote service calls you have to use SEND-SERVICE function. THe syntax of the function is:

	SEND-SERVICE channel [object!] service-name [string!] command-block [block!] callback [function!]

where:

channel - a reference to the used LNS channel

service-name - a string containing the name of service you are going to use

command-block - a block of LNS dialect commands and calls(see explained below)

callback - function callback which is executed after Listener returns a result of the SEND-SERVICE request. The callback function has two arguments CHANNEL and RESULT which can be used in the callback code.

simple example of SEND-SERVICE call usage:

	send-service lns-channel "basic services" [
		[service time]
		[get-time]
	] func [channel result][
		print "result of service:"
		probe result
	]


---Command block

The SEND-SERVICE function is using a command-block as one of its arguments. The command-block should contain one or more commands. Each command have to be written in a sub-block.

Example command-block below is calling one simple service call GET-TIME:

	[
		[service time]
		[get-time]
	]

The result of such service call could look like:

	[
		done [commands 1 time 0:00]
    	ok [get-time 14:28:43]
	]

As you can see the result block always contains:

*generic status information line by either DONE word followed with a block containing info about number of processed commands and time which takes the whole operation or ERROR word followed by a block containing Rebol standard error object.

*one or more lines containing results of each requested command. Each result can be OK word followed by a block of command name and result of the command or a FAIL word followed by a block of command name and standard Rebol error object.

An example of multiple service calls:

	[
		[service time]
		[get-time]
		[service info]
		[service-names]
		[service-obj]
	]

the result of such command could look like this:

	[
		done [commands 3 time 0:00]
	    ok [get-time 14:40:01]
	    ok [service-names [time info]]
	    ok [service-obj
	        make object! [
	            service-names: func [][
	                services]
	            service-obj: func [][
	                self]
        	]
		]
	]

---Errors during LNS call

An example of errorneous call could be:

	[
		[service time]
		[get-timer]
    ]

and the result:

	[
		error [command-failed]
	    fail [get-timer {
			make object! [
			    code: 800
			    type: 'user
			    id: 'message
			    arg1: "service not found"
			    arg2: none
			    arg3: none
			    near: [make error! "service not found"]
			    where: none
			]
		}]
	]
	
	
Another example of error during the exectuion of existing service call:

Let's have this service published on the Listener:

	my-services: make-service [
		info: [
			name: "my services"
		]
		services: [calc]
		data: [
			calc [
				calc-result: func [input][
					do input
				]
			]
		]
	]

Then use following LNS request:

	send-service rpc "my services" [
		[service calc]
		[calc-result 1 + 2 + 5 / 2]
		[calc-result 10 / 0]
	] func [channel result][
		probe result
	]

The result will be then:
	
	[
		error [command-failed]
	    ok [calc-result
	        [1 + 2 + 5 / 2] 4]
	    fail [calc-result 10 / 0 {
			make object! [
			    code: 400
			    type: 'math
			    id: 'zero-divide
			    arg1: none
			    arg2: none
			    arg3: none
			    near: [calc-result 10 / 0]
			    where: 'read-msg
			]
		}]
	]

You can see in the example above that the second command caused a 'divide by zero' error on the Listener side.

===LNS threads

The LNS profile is also using very simple threading for execution of delayed, scheduled or repeated service calls.

---Thread types

There are three commands for different thread modes:

*REPEAT [time!] | [integer!] - will be called periodically until it is killed. You can specify the period either by amount of time or by frequency.

*AFTER [time!] - is called after some amount of time.

*schedule [time!] - is scheduled to aboslute time event.

examples:

	[
		[service time]
		[repeat 1 get-time] ;will return time on every second
		[after 00:00:05 get-time] ;will retunr time after 5 seconds
		[schedule 18-Jul-2005/15:30:26+2:00 get-time] ;will return time on the specified date
		[schedule (now + 0:0:15) get-time] ;will return tie after 15 minutes. By specifying the time value in parens you force to evaluate it on the listener side(useful when times on both machines differs etc.)
	]

---Executing thread

When you execute a thread the Listener returns a unique thread ID with the first result so you can store it and use in your applicoation for future handling of this thread.

example:

you requested execution of following thread:

	[
			[service time]
			[repeat 1 get-time]
	]

the result from Listener could look like:

	[
		done [commands 1 time 0:00:00.01]
	    ok [
			get-time [thread-added "B8C3E59AB7B3052BA7A091BC62219FEED48D7496" 4-Jul-2005/15:35:09.005+2:00]
		]
	]

Please note the long alphanumeric string after the THREAD-ADDED word. This is the thread ID of your requested repeated LNS call. There is also timestamp when the threas was added to execution queue on the Listener side.

So from now the Initiator should receive result of the executed thread every second:

	[thread "B8C3E59AB7B3052BA7A091BC62219FEED48D7496" [15:35:10]]
	[thread "B8C3E59AB7B3052BA7A091BC62219FEED48D7496" [15:35:11]]
	[thread "B8C3E59AB7B3052BA7A091BC62219FEED48D7496" [15:35:12]]
	...
	...

the result of thread has always this format:
	THREAD thread-id result-block
	
That way you can easily decide in your callback handler code which result of which thread you are receiving.

---Killing thread

All you have to know to kill a thread is the thread ID. The you can send anytime LNS call containing this command:

	[
		[kill-thread "B8C3E59AB7B3052BA7A091BC62219FEED48D7496"]
	]
	
As you can see from the example above this LNS command would kill the running thread from example of previous section.

The result of such KILL-THREAD request could look like:

	[
		done [commands 1 time 0:00]
	    ok [kill-thread ["BAFE335EA1C7347377BE80B796ACFC083B49C55C"][true]]
	]

In this case you can see the thread has been succesfuly killed.

